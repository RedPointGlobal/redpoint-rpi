# This example shows how to create a static provisioned Azure File Share Storage

apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: rpi-plugins
  namespace: {{ .Release.Namespace }}
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    # make sure this volumeid is unique for every identical share in the cluster
    # "{resource-group-name}#{storage-account-name}#{file-share-name}" 
    volumeHandle: "ResourceGroupName#storageAccountName#fileShareName"
    volumeAttributes:
      shareName: rpi-plugins
    nodeStageSecretRef:
      name: myK8sSecretName
      namespace: {{ .Release.Namespace }}
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl 

---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: rpdmupload
  namespace: {{ .Release.Namespace }}
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    # make sure this volumeid is unique for every identical share in the cluster
    # "{resource-group-name}#{storage-account-name}#{file-share-name}" 
    volumeHandle: "ResourceGroupName#storageAccountName#fileShareName"
    volumeAttributes:
      shareName: rpdmuploaddirectory
    nodeStageSecretRef:
      name: myK8sSecretName
      namespace: {{ .Release.Namespace }}
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl 

---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: rpi-fileoutput
  namespace: {{ .Release.Namespace }}
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    # make sure this volumeid is unique for every identical share in the cluster
    # "{resource-group-name}#{storage-account-name}#{file-share-name}" 
    volumeHandle: "ResourceGroupName#storageAccountName#fileShareName"
    volumeAttributes:
      shareName: rpifileoutputdir
    nodeStageSecretRef:
      name: myK8sSecretName
      namespace: {{ .Release.Namespace }}
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl 

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rpi-fileoutput
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: rpi-fileoutput
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rpi-plugins
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: rpi-plugins
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rpdmupload
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: rpdmupload
  resources:
    requests:
      storage: 100Gi