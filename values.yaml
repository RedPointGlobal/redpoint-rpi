global:
  application:
    name: redpoint-interaction
    version: "7.3"
    environment: prod 
  # Define the Kubernetes namespace in which the services will be deployed.
  # This namespace should already exist or be created prior to deployment.
  namespace: redpoint-rpi

  # Set the number of replicas for the deployment.
  # This determines how many instances of each pod will be created.
  replicaCount: 1

  # Specify the image tag for the main application.
  # This tag refers to a specific version of the docker image to be deployed.
  image_tag_internal: 7.3.2024-0703-1351
  image_tag_client: 7.3.2024-0703-1351
  # Specify the image tag for the documentation service.
  # Similar to 'image_tag', this refers to the docker image version for the docs service.

  # Select the cloud provider where the infrastructure is hosted.
  # Options include 'azure', 'google', or 'amazon'.
  # This setting may influence certain cloud-specific configurations.
  cloudProvider: azure 
  # Define the deployment type.
  # 'client' is for external clients, while 'internal' is reserved for Redpoint users.
  # This may affect access controls and available features.
  deploymentType: client
  imagePullPolicy: Always
  nodeSelector: {}
  # The nodeSelector is used to specify the nodes where RPI should be deployed.
  # In this case, 'app: {{ .Values.global.nodeSelector.app }}' label is used to ensure RPI is deployed on nodes labeled for Redpoint RPI.
  # This can be particularly useful for directing RPI to specific types of hardware or nodes with certain capabilities.
#    app: redpoint-rpi
  tolerations: {}
  # Tolerations are used in Kubernetes to allow (or 'tolerate') pods to be scheduled on nodes with matching taints.
  # They are key to ensuring that pods are deployed on appropriate nodes.
  # Here, the toleration is set to allow the RPI to be scheduled on nodes with a taint of 'app: {{ .Values.global.nodeSelector.app }}'.
  # The effect 'NoSchedule' indicates that the RPI should not be scheduled on nodes without this specific taint.
  # This configuration ensures that RPI is deployed on nodes specifically designated for Redpoint RPI,
  # possibly for reasons such as specific hardware, security policies, or network configurations.
#    - effect: NoSchedule
#      key: app
#      operator: Equal
#      value: redpoint-rpi

appsettings:
  interactionapi:

  configeditor:
    sqlServer: 
      type: demo # Allowed values are demo, sqlserver, azuresql, amazonrds, cloudsql and postgresql
      serverName: sql-rpi-ops
      username: sa
      password: MyC0m9l&xP@ssw0rd
      pulseDatabaseName: Pulse
      loggingDatabaseName: Pulse_Logging

      # Connection string for the Logging database.
      # Ensure this string matches your database's connection requirements, including the correct server address, database name, and credentials.
      ConnectionStrings_LoggingDatabase: Server=tcp:sql-rpi-ops,1433;Database=Pulse_Logging;User ID=sa;Password=MyC0m9l&xP@ssw0rd;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;

      # Connection string for the Operational database.
      # Similar to the Logging database, this string should be configured to match the specific requirements of the Operational database.
      ConnectionStrings_OperationalDatabase: Server=tcp:sql-rpi-ops,1433;Database=Pulse;User ID=sa;Password=MyC0m9l&xP@ssw0rd;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;

  realtime:
    rpiClientID: "1111111-1111-1111-1111-1111111111"
    rpiAuthToken: "03eda994-5d39-4886-99df-9ccafd40a181"
    enableHelpPages: true 
    enableEventListening: true
    realtimeProcessingEnabled: true
    decisionCacheDuration: 60
    enableAuditMetricsInHeaders: true
    cacheOutputQueueEnabled: true

    queueProvider: 
      type: sqs # Allowed values are sqs, servicebus, rabbitmq, pubsub, eventhub
      queueNames: 
        formQueuePath: dev-rpiwebformsubmission
        eventsQueuePath: dev-rpiwebevents
        cacheOutputQueuePath: dev-rpiwebcachedata
        recommendationsQueuePath: dev-rpiwebrecommendation
        listenerQueuePath: dev-rpiqueuelistener
      eventHub: 
        eventHubName: dev-evh-realtime
        connectionString: Endpoint=sb://example.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<your_shared_access_key>
      sqs: 
        accessKey: youraccesskey
        secretKey: yoursecretkey
        regionEndpoint: your_aws_sqs_region

    cacheProvider: 
      type: mongodb # Allowed values are mongodb and redis
      mongodb: 
        databaseName: DevRealtimeCache
        ConnectionString: 
        CollectionName: DevRealtimeCache

      redis: 
        hostName: redis.example.com
        

  callbackapi:
    queueProvider: 
      type: eventhub # Allowed values are eventhub, servicebus and rabbitmq
      ChannelLabel: SendGrid
      callbackServiceQueuePath: dev-sendgridcallback
    eventHub:
      eventHubName: dev-sendgridcallback
      eventHubConnectionString: Endpoint=sb://example.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<your_shared_access_key>
    externalContentProvider:
      type: azureblob
      storageAccountName: sasendgridcallback
      storageAccountKey: your_storage_account_access_key
      enabled: false 
      containerName: dev-sendgridcallbackecp
      saveEmailEvents: true


  executionservice:
    RPIExecution__QueueListener__IsEnabled: false 
    RPIExecution_MaxThreadsPerExecutionService: 50
    RPIExecution__QueueListener__QueuePath: "temporaryplaceholder"

  OpenIdProviders:
    # Host for OpenID Connect Metadata
    MetadataHost: ""
    # Microsoft Entra ID App registration Client ID
    ClientID: xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx
    # Name of the OpenID Connect provider. Azure AD in this example
    Name: AzureAD
    # Redirect URL after authentication
    RedirectURL: "https://redpointrpi.example.com"
    # Audience for the OpenID Connect authentication request
    Audience: api://xxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    # Authorization host for OpenID Connect
    AuthorizationHost: "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize"
    # Enable or disable refresh tokens
    EnableRefreshTokens: true
    # Custom scopes for OpenID Connect
    CustomScopes: ["api://xxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Interaction.Clients"]
    # Parameter for id_token_hint during logout
    LogoutIdTokenParameter: id_token_hint
    # Validate issuer of the OpenID Connect provider
    ValidateIssuer: false
    # Validate audience of the OpenID Connect provider
    ValidateAudience: true

  # Define storage configuration
  storage:
    # Set whether storage is enabled or not (false means disabled)
    enabled: false
    # Specify the persistent volume claim for the File output directory
    persistentVolumeClaim: rpifileoutputdir

SMTPSettings:
  SMTP_SenderAddress: noreply-rpi@example.com
  SMTP_Address: smtp-host.example.com
  SMTP_Port: 587
  SMTP_Username: example-smtp-username
  SMTP_Password: example-smtp-password

MercurySettings:
  Mercury_Address: mercury.example.com
  Mercury_Username: example-mercury-password
  Mercury_Password: example-mercury-password
   
ingress:
  enabled: false
  type: nginx 
  networking: public # Allowed values are public or internal
  cloud: amazon # Allowe values are internal, amazon google and azure
  subnet: example-subnet-name
  aws_cert_manager_arn: arn:aws:acm:us-west-2:XXXXXXXX:certificate/XXXXXX-XXXXXXX-XXXXXXX-XXXXXXXX

  # Specify the domain name for the ingress resources.
  # This domain will be used to access the services deployed under this ingress.
  domain: example.com

  # Annotations can be used to customize the behavior of the ingress controller.
  # Add any specific annotations required for your ingress setup here.
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 99m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  # Define hostnames for different services in your application.
  # Each entry maps a subdomain of the main domain to a specific service.
  hosts:
    # Config service - Access configuration-related services at 'rpi-config.example.com'.
    config: dev-configeditor
    
    # Client service - RPI client login at 'rpi-client.example.com'.
    client: dev-interactionapi

    # Integration API - Access integration API at 'rpi-integapi.example.com'.
    integration: dev-integrationapi

    # Real-time service - Access real-time services at 'rpi-realtime.example.com'.
    realtime: dev-realtimeapi

    # Callback API - Access the callback API at 'redpointrpi-callbackapi.example.com'.
    callbackapi: dev-callbackapi

