global:
  application:
    name: redpointcdp-interaction
    version: "7"
  # Supported cloud providers are
  # azure  (Azure)
  # amazon (AWS)
  # google (GCP)
  # internal (Redpoint Internal)
  cloud: amazon

  # Kubernetes namespace in which the services will be deployed.
  namespace: redpoint-rpi
  # This tag refers to a specific version of the docker image to be deployed.
  image_tag: 7.3.2024-0703-1351
  
  # Define the deployment type.
  # 'client' is for external clients, while 'internal' is reserved for Redpoint users.
  # The nodeSelector is used to specify the nodes where RPI should be deployed.
  nodeSelector: {}
  # tolerations ensures that RPI is deployed on nodes specifically designated for Redpoint RPI,
  tolerations: {}
#    - effect: NoSchedule
#      key: app
#      operator: Equal
#      value: redpoint-rpi

  # Set the number of replicas for the deployment.
replicas:
  interactionapi: 1
  integrationapi: 1
  configeditor: 1
  callbackapi: 1
  nodemanager: 1
  executionservice: 1
  realtimeapi: 1
  redis: 1
  queueservice: 1
  queuereader: 1
  
databases: 
  # The Supported options for database type are 
  # sqlserver, azuresql, amazonrds, postgresql, and googlecloudsql
  type: amazonrds
  serverhost: your_sql_server_host
  username: your_sql_username
  password: your_sql_password
  operationsDatabaseName: Pulse
  loggingDatabaseName: Pulse_Logging

realtime:
  rpiClientID: "00000000-0000-0000-0000-000000000000"
  rpiAuthToken: "00000000-0000-0000-0000-000000000000" 
  enableHelpPages: true 
  enableEventListening: true
  realtimeProcessingEnabled: true
  decisionCacheDuration: 60
  enableAuditMetricsInHeaders: true
  cacheOutputQueueEnabled: true

queueNames: 
  formQueuePath: dev-rpiwebformsubmission
  eventsQueuePath: dev-rpiwebevents
  cacheOutputQueuePath: dev-rpiwebcachedata
  recommendationsQueuePath: dev-rpiwebrecommendation
  listenerQueuePath: dev-rpiqueuelistener
  
queueProviders: 
  # Supported queue providers are 
  # sqs        for Amazon SQS
  # servicebus for Azure Servicebus
  # pubsub     for Google PubSub
  # rabbitmq   for RabbitMQ
  # eventhub   for Azure Event Hubs
  type: sqs 

  eventHub: 
    eventHubName: RealtimeTest
    connectionString: your_event_hub_connection_string
  
  sqs: 
    accessKey: your_aws_iam_accesskey
    secretKey: your_aws_iam_secretkey
    regionEndpoint: us-east-1
  
  rabbitmq: 
    hostName: rpi-queueservice
    username: redpointdev
    password: .RedPoint2021
  
  servicebus: 
    connectionString: your_service_bus_connection_string 
  
  pubsub: 

cacheProviders: 
  # Supported Cache providers are 
  # mongodb        for MongoDB 
  # redis          for Redis Cache
  type: mongodb

  mongodb: 
    databaseName: rpiCacheDB
    ConnectionString: your_mongodb_connection_string
    CollectionName: rpiCacheCollection

  redis: 
    hostName: rpi-rediscache

callbackapi:
  queueEnabled: true
  channelLabel: SendGrid
  callbackServiceQueuePath: sendgridcallbackqueue

externalContentProvider:
  type: azureblob
  storageAccountName: saredpointrpiecp
  storageAccountKey: your_storage_account_access_key
  enabled: false 
  containerName: sendgridcallbackapi
  saveEmailEvents: true

executionservice:
  RPIExecution__QueueListener__IsEnabled: false 
  RPIExecution_MaxThreadsPerExecutionService: 50
  RPIExecution__QueueListener__QueuePath: "temporaryplaceholder"

interactionapi: 
  enableSwagger: true

integrationapi:
  enableSwagger: true

OpenIdProviders:
  # Host for OpenID Connect Metadata
  MetadataHost: ""
  # Microsoft Entra ID App registration Client ID
  ClientID: 00000000-0000-0000-0000-000000000000
  # Name of the OpenID Connect provider. Azure AD in this example
  Name: AzureAD
  # Audience for the OpenID Connect authentication request
  Audience: api://00000000-0000-0000-0000-000000000000
  # Authorization host for OpenID Connect
  AuthorizationHost: "https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/oauth2/v2.0/authorize"
  # Enable or disable refresh tokens
  EnableRefreshTokens: true
  # Custom scopes for OpenID Connect
  CustomScopes: ["api://00000000-0000-0000-0000-000000000000/Interaction.Clients"]
  # Parameter for id_token_hint during logout
  LogoutIdTokenParameter: id_token_hint
  # Validate issuer of the OpenID Connect provider
  ValidateIssuer: false
  # Validate audience of the OpenID Connect provider
  ValidateAudience: true

# Define storage configuration
storage:
  # Set whether storage is enabled or not (false means disabled)
  enabled: false
  # Specify the persistent volume claim for the File output directory
  persistentVolumeClaim: rpifileoutputdir

SMTPSettings:
  SMTP_SenderAddress: noreply-rpi@example.com
  SMTP_Address: smtp-host.example.com
  SMTP_Port: 587
  SMTP_Username: example-smtp-username
  SMTP_Password: example-smtp-password

ingress:
  enabled: false
  type: nginx 
  # Allowed values are public or internal
  networking: public 
  # Allowed values are internal, amazon google and azure
  cloud: amazon 
  subnet: example-subnet-name
  aws_cert_manager_arn: arn:aws:acm:us-west-2:XXXXXXXX:certificate/XXXXXX-XXXXXXX-XXXXXXX-XXXXXXXX

  # Specify the domain name for the ingress resources.
  domain: example.com
  # Add any specific annotations required for your ingress setup here.
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 99m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  # Define hostnames for different services in your application.
  hosts:
    # Config service
    config: rpi-configeditor
    
    # Client service
    client: rpi-interactionapi

    # Integration API
    integration: rpi-integrationapi

    # Real-time service 
    realtime: rpi-realtimeapi

    # Callback API
    callbackapi: rpi-callbackapi

