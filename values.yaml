global:
  application:
    name: redpoint-interaction
    version: "7"
  # Supported cloud providers are azure, amazon, google, and demo
  cloud: amazon

  # Kubernetes namespace in which the services will be deployed.
  namespace: redpoint-rpi
  # This tag refers to a specific version of the docker image to be deployed.
  image_tag: 7.3.2024-0703-1351
  
  # The nodeSelector is used to specify the nodes where RPI should be deployed.
  nodeSelector: {}
  # tolerations ensures that RPI is deployed on nodes specifically designated for Redpoint RPI,
  tolerations: {}
#    - effect: NoSchedule
#      key: app
#      operator: Equal
#      value: redpoint-rpi

  # Set the number of replicas for the deployment.
replicas:
  interactionapi: 1
  integrationapi: 1
  configeditor: 1
  callbackapi: 1
  nodemanager: 1
  executionservice: 1
  realtimeapi: 1
  redis: 1
  queueservice: 1
  queuereader: 1
  
databases:
  # upported options are sqlserver, azuresql, amazonrds, postgresql, and googlecloudsql
  type: amazonrds #sqlserver 
  # The hostname or IP address of the database server
  serverhost: rpiopsmssqlserver
  # The username for authenticating to the database server
  username: mssqladmin
  # The password for authenticating to the database server
  password: .RedPoint2024
  # The name of the database used for operations
  operationsDatabaseName: Pulse
  # The name of the database used for logging purposes
  loggingDatabaseName: Pulse_Logging 

realtime:
  # Unique identifier for the RPI client. Ensure this matches your registered RPI client ID.
  rpiClientID: "00000000-0000-0000-0000-000000000000"
  # Authentication token associated with the RPI client. This token is used to authenticate API requests.
  rpiAuthToken: "00000000-0000-0000-0000-000000000000" 
  # Set to `true` to make the Realtime API Swagger page available for API exploration and testing.
  enableHelpPages: true 
  enableEventListening: true
  realtimeProcessingEnabled: true
  decisionCacheDuration: 60
  enableAuditMetricsInHeaders: true
  cacheOutputQueueEnabled: true

queueNames: 
  formQueuePath: RPIWebFormSubmission
  eventsQueuePath: RPIWebEvents
  cacheOutputQueuePath: RPIWebCacheData
  recommendationsQueuePath: RPIWebRecommendations
  listenerQueuePath: RPIQueueListener
  callbackServiceQueuePath: RPICallbackApiQueue
  
queueProviders: 
  # Supported queue providers are sqs, azureservicebus, googlepubsub, rabbitmq, azureeventhubs
  type: amazonsqs 

  azureeventhubs: 
    eventHubName: your_event_hub_name
    connectionString: your_event_hub_connection_string
  
  amazonsqs: 
    accessKey: your_aws_iam_accesskey
    secretKey: your_aws_iam_secretkey
    regionEndpoint: us-east-1
  
  rabbitmq: 
    hostName: your_rabbitmq_host
    username: your_rabbitmq_username
    password: your_rabbitmq_password
  
  azureservicebus: 
    connectionString: your_service_bus_connection_string 
  
  googlepubsub:
    projectId: your_google_project_Id

cacheProviders: 
  # Supported cache providers are mongodb, redis, cassandra, googlebigtable, azureredis and cosmosdb
  type: mongodb

  mongodb: 
    databaseName: rpiCache
    ConnectionString: your_mongodb_connection_string
    CollectionName: rpiCacheCollection

  redis: 
    hostName: your_redis_cache_host
    
  cassandra:
    keyspace: rpi
    contactpoints: server1,server2
    username: your_cassandra_username
    password: your_cassandra_password

  googlebigtable:

  azureredis:
    connectionString: your_redis_connection_string
    disableMGET: true

  cosmosdb:

callbackapi:
  queueEnabled: true
  channelLabel: SendGrid
  callbackServiceQueuePath: sendgridcallbackqueue

externalContentProvider:
  type: azureblob
  storageAccountName: saredpointrpiecp
  storageAccountKey: your_storage_account_access_key
  enabled: false 
  containerName: sendgridcallbackapi
  saveEmailEvents: true

executionservice:
  RPIExecution__QueueListener__IsEnabled: false 
  RPIExecution_MaxThreadsPerExecutionService: 50
  RPIExecution__QueueListener__QueuePath: "temporaryplaceholder"

interactionapi: 
  enableSwagger: true

integrationapi:
  enableSwagger: true

OpenIdProviders:
  # Host for OpenID Connect Metadata
  MetadataHost: ""
  # Microsoft Entra ID App registration Client ID
  ClientID: 00000000-0000-0000-0000-000000000000
  # Name of the OpenID Connect provider. Azure AD in this example
  Name: AzureAD
  # Audience for the OpenID Connect authentication request
  Audience: api://00000000-0000-0000-0000-000000000000
  # Authorization host for OpenID Connect
  AuthorizationHost: "https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/oauth2/v2.0/authorize"
  # Enable or disable refresh tokens
  EnableRefreshTokens: true
  # Custom scopes for OpenID Connect
  CustomScopes: ["api://00000000-0000-0000-0000-000000000000/Interaction.Clients"]
  # Parameter for id_token_hint during logout
  LogoutIdTokenParameter: id_token_hint
  # Validate issuer of the OpenID Connect provider
  ValidateIssuer: false
  # Validate audience of the OpenID Connect provider
  ValidateAudience: true

# Define storage configuration for the RPI File Output Directory
storage:
  enabled: false
  persistentVolumeClaim: rpifileoutputdir

SMTPSettings:
  SMTP_SenderAddress: noreply-rpi@example.com
  SMTP_Address: your_smtp_host
  SMTP_Port: 587
  SMTP_Username: your_smtp_server_username
  SMTP_Password: your_smtp_server_password

ingress:
  controller:
    # Set enabled to false if you want to disable the creation of the ingress controller
    enabled: true 
  # Set mode to private for internal ingress and public for public ingress
  mode: public 
  # Set certificateSource to acm if your certificate is managed in AWS Certificate Manager 
  # If you set it to k8ssecret, you must create a kubernetes secret containing your certificates
  certificateSource: k8ssecret # acm
  tlsSecretName: ingress-tls
  className: nginx-redpoint-rpi
  # Subnet name is only required if you set the ingress mode to private
  subnetName: your_ingress_vpc_or_vnet_subnet 
  # Certificate Arn is only required if you set the certificateSource to acm
  certificateArn: your_acm_certificate_arn
  
  # Specify the domain name for the ingress resources.
  domain: rg1cloud.com
  # Add any specific annotations required for your ingress setup here.
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 99m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
  # Define hostnames for different services in your application.
  hosts:
    # Configuration service
    config: rpi-deploymentapi
    
    # Client Login service
    client: rpi-interactionapi

    # Integration API
    integration: rpi-integrationapi

    # Real-time service 
    realtime: rpi-realtimeapi

    # Callback API
    callbackapi: rpi-callbackapi

