{{- if .Values.queuereader.enabled }}
{{- if .Values.queuereader.serviceAccount.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.queuereader.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: rpi-queuereader
  {{- if eq .Values.global.deployment.platform "azure" }}
  {{- if .Values.cloudIdentity.enabled }}
  {{- if eq .Values.cloudIdentity.azureSettings.credentialsType "workloadIdentity" }}
  annotations:
    azure.workload.identity/client-id: {{ .Values.cloudIdentity.azureSettings.managedIdentityClientId }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- if eq .Values.global.deployment.platform "google" }}
  {{- if .Values.cloudIdentity.enabled }}
  {{- if eq .Values.cloudIdentity.azureSettings.credentialsType "workloadIdentity" }}
  annotations:
    iam.gke.io/gcp-service-account: {{ .Values.cloudIdentity.googleSettings.serviceAccountEmail | quote }}
  {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{- if .Values.queuereader.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.queuereader.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: rpi-queuereader
spec:
  ports:
  - name: http
    port: {{ .Values.queuereader.service.port }}
    protocol: TCP
    targetPort: 8080
  selector:
    app: rpi-queuereader

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.queuereader.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: rpi-queuereader
    {{- with .Values.queuereader.customLabels }}
    {{- toYaml . | nindent 4 }} 
    {{- end }}
spec:
  {{- if not .Values.queuereader.autoscaling.enabled }}
  replicas: {{ .Values.queuereader.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: rpi-queuereader
  template:
    metadata:
      labels:
        app: rpi-queuereader
        {{- with .Values.queuereader.customLabels }}
        {{- toYaml . | nindent 8 }} 
        {{- end }}
        {{- if eq .Values.global.deployment.platform "azure" }}
        {{- if eq .Values.cloudIdentity.azureSettings.credentialsType "workloadIdentity" }}
        azure.workload.identity/use: "true"
        {{- end }}
        {{- end }}
      annotations:
        {{- with .Values.queuereader.customAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.queuereader.customMetrics.enabled }}
        prometheus.io/scrape: {{ .Values.queuereader.customMetrics.prometheus_scrape | quote }}
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        {{- end }}
    spec:
      {{- if .Values.global.deployment.images.imagePullSecret.enabled }}
      imagePullSecrets:
      - name: {{ .Values.global.deployment.images.imagePullSecret.name }}
      {{- end }}
      serviceAccountName: {{ .Values.queuereader.serviceAccount.name }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      containers:
      - env:
        - name: Logging__LogLevel__Default
          value: {{ .Values.queuereader.logging.default | quote }}
        - name: Logging__Database__LogLevel__Default
          value: {{ .Values.queuereader.logging.database | quote }}
        - name: Logging__Database__RPITrace
          value: {{ .Values.queuereader.logging.rpiTrace | quote }}
        - name: Logging__Database__RPIError
          value: {{ .Values.queuereader.logging.rpiError | quote }}
        - name: RPI__ServiceHostName
          value: "http://rpi-interactionapi"
        - name: RPI__ServiceHostPortNumber
          value: {{ .Values.interactionapi.service.port | quote }}
        - name: RealtimeAPIAddressOverride
          value: "http://rpi-realtimeapi"
        {{- if eq .Values.databases.operational.provider "postgresql" }}
        - name: RPI_OperationalDatabaseType
          value: "PostgreSQL"
        {{- end }}
        {{- if .Values.cloudIdentity.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Azure" }}
        {{- if eq .Values.cloudIdentity.azureSettings.credentialsType "workloadIdentity" }}
        - name: CloudIdentity__Azure__CredentialType
          value: "AzureIdentity"
        - name: CloudIdentity__Azure__UseADTokenForDatabaseConnection
          value: {{ .Values.cloudIdentity.azureSettings.UseADTokenForDatabaseConnection | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.cloudIdentity.secretsManagement.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Azure" }}
        - name: KeyVault__Provider
          value: "Azure"
        - name: KeyVault__UseForAppSettings
          value: {{ .Values.cloudIdentity.secretsManagement.UseForAppSettings | quote }}
        - name: KeyVault__UseForConfigPasswords
          value: {{ .Values.cloudIdentity.secretsManagement.UseForConfigPasswords | quote }}
        - name: KeyVault__AzureSettings__VaultURI
          value: {{ .Values.cloudIdentity.azureSettings.vaultUri | quote }}
        - name: KeyVault__AzureSettings__AppSettingsVaultURI
          value: {{ .Values.cloudIdentity.azureSettings.appSettingsVaultUri | quote }}
        - name: KeyVault__AzureSettings__ConfigurationReloadIntervalSeconds
          value: {{ .Values.cloudIdentity.secretsManagement.ConfigurationReloadIntervalSeconds | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.cloudIdentity.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Google" }}
        {{- if eq .Values.cloudIdentity.googleSettings.credentialsType "serviceAccount" }}
        - name: CloudIdentity__Google_ProjectId
          value: {{ .Values.cloudIdentity.googleSettings.projectId | quote }}
        - name: GOOGLE_APPLICATION_CREDENTIALS 
          value: "/app/google-creds/{{ .Values.cloudIdentity.googleSettings.serviceAccountName }}.json"
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.cloudIdentity.secretsManagement.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Google" }}
        - name: KeyVault__Provider
          value: "Google"
        - name: KeyVault__UseForAppSettings
          value: {{ .Values.cloudIdentity.secretsManagement.UseForAppSettings | quote }}
        - name: KeyVault__UseForConfigPasswords
          value: {{ .Values.cloudIdentity.secretsManagement.UseForConfigPasswords | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.cloudIdentity.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Amazon" }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "keyvault" }}
        - name: CloudIdentity__Amazon__AccessKeyId
          value: {{ .Values.cloudIdentity.amazonSettings.accessKeyId | quote }}
        - name: CloudIdentity__Amazon__SecretAccessKey
          value: {{ .Values.cloudIdentity.amazonSettings.secretAccessKey | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.cloudIdentity.secretsManagement.enabled }}
        {{- if eq .Values.cloudIdentity.provider "Amazon" }}
        - name: KeyVault__Provider
          value: "Amazon"
        - name: KeyVault__UseForAppSettings
          value: {{ .Values.cloudIdentity.secretsManagement.UseForAppSettings | quote }}
        - name: KeyVault__UseForConfigPasswords
          value: {{ .Values.cloudIdentity.secretsManagement.UseForConfigPasswords | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.storage.persistentVolumeClaims.FileOutputDirectory.enabled }}
        - name: RPI__FileOutput__Directory
          value: /fileoutputdir
        {{- end }}
        {{- if eq .Values.databases.operational.provider "sqlserver" }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        - name: CONNECTIONSTRINGS__LOGGINGDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Logging_Database
              name: redpoint-rpi-secrets
        - name: CONNECTIONSTRINGS__OPERATIONALDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Operations_Database
              name: redpoint-rpi-secrets
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.operational.provider "sqlserveronvm" }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        - name: CONNECTIONSTRINGS__LOGGINGDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Logging_Database
              name: redpoint-rpi-secrets
        - name: CONNECTIONSTRINGS__OPERATIONALDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Operations_Database
              name: redpoint-rpi-secrets
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.operational.provider "postgresql" }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        - name: CONNECTIONSTRINGS__LOGGINGDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Logging_Database
              name: redpoint-rpi-secrets
        - name: CONNECTIONSTRINGS__OPERATIONALDATABASE
          valueFrom:
            secretKeyRef:
              key: ConnectionString_Operations_Database
              name: redpoint-rpi-secrets
        {{- end }}
        {{- end }}
        - name: QueueService__QueueListener__IsEnabled
          value: {{ .Values.queuereader.queueListenerEnabled | quote }}
        - name: QueueService__QueueListener__QueuePath
          value: {{ .Values.realtimeapi.queueProvider.queueNames.listenerQueuePath | quote }}
        - name: QueueService__QueueListener__ThreadPoolSize
          value: {{ .Values.queuereader.threadPoolSize | quote }}
        - name: QueueService__QueueListener__TimeoutMinutes
          value: {{ .Values.queuereader.timeoutMinutes | quote }}
        - name: QueueService__QueueListener__MaxBatchSize
          value: {{ .Values.queuereader.maxBatchSize | quote }}
        - name: QueueService__QueueListener__UseMessageLocks
          value: {{ .Values.queuereader.useMessageLocks | quote }}
        - name: QueueService__RealtimeConfiguration__IsFormProcessingEnabled
          value: {{ .Values.queuereader.isFormProcessingEnabled | quote }}
        - name: QueueService__RealtimeConfiguration__IsEventProcessingEnabled
          value: {{ .Values.queuereader.isEventProcessingEnabled | quote }}
        - name: QueueService__RealtimeConfiguration__IsCacheProcessingEnabled
          value: {{ .Values.queuereader.isCacheProcessingEnabled | quote }}
        - name: QueueService__RealtimeConfiguration__TenantIDs
          value: '{{ toJson .Values.queuereader.realtimeConfiguration.tenantIds }}'
        - name: QueueService__QueueListener__ListenerQueueNonActiveQueuePath
          value: {{ .Values.queuereader.listenerQueueNonActiveQueuePath | quote}}
        - name: QueueService__QueueListener__ListenerQueueNonActiveTTLDays
          value: {{ .Values.queuereader.listenerQueueNonActiveTTLDays | quote}}
        - name: QueueService__QueueListener__ListenerQueueErrorQueuePath
          value: {{ .Values.queuereader.listenerQueueErrorQueuePath | quote}}
        - name: QueueService__QueueListener__ListenerQueueErrorTTLDays
          value: {{ .Values.queuereader.listenerQueueErrorTTLDays | quote}}
        - name: QueueService__RealtimeConfiguration__IsDistributed
          value: {{ .Values.queuereader.realtimeConfiguration.isDistributed | quote }}
        {{- if .Values.queuereader.realtimeConfiguration.isDistributed }}
        {{- if eq .Values.queuereader.realtimeConfiguration.distributedCache.provider "Redis" }}
        - name: QueueService__RealtimeConfiguration__DistributedCache__Provider
          value: {{ .Values.queuereader.realtimeConfiguration.distributedCache.provider | quote }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if .Values.queuereader.realtimeConfiguration.isDistributed }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__RedisSettings__IPAddress
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_RedisCache_ConnectionString
        {{- end }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "rabbitmq" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Resonance.RabbitMQAccess"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Resonance.RabbitMQAccess.RabbitMQFactory"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "Hostname"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          value: {{ .Values.realtimeapi.queueProvider.rabbitmq.hostname | quote }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Key
          value: "VirtualHost"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Value
          value: {{ .Values.realtimeapi.queueProvider.rabbitmq.virtualHost | quote }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__2__Key
          value: "UserName"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__2__Value
          value: {{ .Values.realtimeapi.queueProvider.rabbitmq.username | quote }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__3__Key
          value: "Password"
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "rabbitmq" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__3__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RABBITMQ_Password
        {{- end }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "azureservicebus" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Azure.Server"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Azure.Server.AzureQueue.AzureServiceBusQueueFactory"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "QueueType"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          value: "ServiceBus"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Key
          value: "ConnectionString"
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "azureservicebus" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_ServiceBus_ConnectionString
        {{- end }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "amazonsqs" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Azure.Server"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Amazon.Server.AWSQueue.SQSQueueFactory"
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "amazonsqs" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "AccessKey"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_QueueSettings_AccessKey
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Key
          value: "SecretKey"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_QueueSettings_SecretKey
        {{- end }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "googlepubsub" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Azure.Server"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Google.Server.GooglePubSub.GooglePubSubFactory"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "ProjectId"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          value: {{ .Values.queueProviders.googlepubsub.projectId | quote }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "azureeventhubs" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Azure.Server"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Azure.Server.AzureEventHubs.AzureEventHubsFactory"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "EventHubName"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          value: {{ .Values.realtimeapi.queueProvider.azureeventhubs.eventHubName | quote }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Key
          value: "EventHubConnectionString"
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "azureeventhubs" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_EventHub_ConnectionString
        {{- end }}
        {{- end }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "amazonmsk" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Assembly
          value: "RedPoint.Resonance.KafkaQueueAccess"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Type
          value: "RedPoint.Resonance.KafkaQueueAccess.KafkaQueueFactory"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Key
          value: "BootstrapServers"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__0__Value
          value: {{ .Values.realtimeapi.queueProvider.amazonmsk.bootstrapServers | quote }}
        {{- end }}
        {{- if eq .Values.cloudIdentity.secretsManagement.secretsProvider "kubernetes" }}
        {{- if eq .Values.realtimeapi.queueProvider.provider "amazonmsk" }}
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Key
          value: "AccessKey"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__1__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_QueueSettings_AccessKey
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__2__Key
          value: "SecretKey"
        - name: QueueService__RealtimeConfiguration__DistributedQueue__Settings__2__Value
          valueFrom:
            secretKeyRef:
              name: redpoint-rpi-secrets
              key: RealtimeAPI_QueueSettings_SecretKey
        {{- end }}
        {{- end }}
        image: {{ .Values.global.deployment.images.queuereader }}:{{ .Values.global.deployment.images.tag }}
        imagePullPolicy: {{  .Values.global.deployment.images.imagePullPolicy }}
        name: rpi-queuereader
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ .Values.queuereader.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.queuereader.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.queuereader.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.queuereader.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: {{ .Values.queuereader.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.queuereader.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.queuereader.readinessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.queuereader.readinessProbe.timeoutSeconds }}
        startupProbe:
          httpGet:
            path: /health/live
            port: 8080
          failureThreshold: {{ .Values.queuereader.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.queuereader.startupProbe.periodSeconds }}
        {{- if eq .Values.databases.datawarehouse.provider "redshift" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "cat /app/odbc-config/odbc2.ini > /app/odbc-config/odbc.ini"]
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.datawarehouse.provider "bigquery" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "cat /app/odbc-config/odbc2.ini > /app/odbc-config/odbc.ini"]
        {{- end }}
        {{- end }}
        ports:
        - containerPort: 8080
          name: web-port
          protocol: TCP
        resources:
          limits:
            cpu: {{ .Values.queuereader.resources.limits.cpu }}
            memory: {{ .Values.queuereader.resources.limits.memory }}
          requests:
            cpu: {{ .Values.queuereader.resources.requests.cpu }}
            memory: {{ .Values.queuereader.resources.requests.memory }}
        volumeMounts:
          {{- if eq .Values.databases.datawarehouse.provider "redshift" }}
          {{- if .Values.databases.datawarehouse.enabled }}
          - name: odbc-config
            mountPath: /app/odbc-config/odbc2.ini
            subPath: odbc2.ini
          {{- end }}
          {{- end }}
          {{- if eq .Values.databases.datawarehouse.provider "bigquery" }}
          {{- if .Values.databases.datawarehouse.enabled }}
          {{- if eq .Values.databases.datawarehouse.bigquery.credentialsType "serviceAccount" }}
          - name: {{ .Values.databases.datawarehouse.bigquery.configMapName | quote }}
            mountPath: "{{ .Values.databases.datawarehouse.bigquery.ConfigMapFilePath }}/{{ .Values.databases.datawarehouse.bigquery.keyName }}"
            subPath: "{{ .Values.databases.datawarehouse.bigquery.keyName }}"
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if eq .Values.databases.datawarehouse.provider "bigquery" }}
          {{- if .Values.databases.datawarehouse.enabled }}
          - name: odbc-config
            mountPath: /app/odbc-config/odbc2.ini
            subPath: odbc2.ini
          {{- end }}
          {{- end }}
          {{- if eq .Values.databases.datawarehouse.provider "snowflake" }}
          {{- if .Values.databases.datawarehouse.enabled }}
          - name: snowflake-creds
            mountPath: {{ .Values.databases.datawarehouse.snowflake.ConfigMapFilePath }}/{{ .Values.databases.datawarehouse.snowflake.keyName }}
            subPath: {{ .Values.databases.datawarehouse.snowflake.keyName }}
          {{- end }}
          {{- end }}
          {{- if .Values.storage.persistentVolumeClaims.FileOutputDirectory.enabled }}
          - name: rpifileoutputdir
            mountPath: {{  .Values.storage.persistentVolumeClaims.FileOutputDirectory.mountPath }}
          {{- end }}
          {{- if .Values.storage.persistentVolumeClaims.DataManagementUploadDirectory.enabled }}    
          - name: rpdmuploaddirectory
            mountPath: {{  .Values.storage.persistentVolumeClaims.DataManagementUploadDirectory.mountPath }}
          {{- end }}
      volumes:
        {{- if eq .Values.databases.datawarehouse.provider "redshift" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        - name: odbc-config
          configMap:
            name: odbc-config
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.datawarehouse.provider "bigquery" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        {{- if eq .Values.databases.datawarehouse.bigquery.credentialsType "serviceAccount" }}
        - name: {{ .Values.databases.datawarehouse.bigquery.configMapName | quote }}
          configMap:
            name: {{ .Values.databases.datawarehouse.bigquery.configMapName | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.datawarehouse.provider "bigquery" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        - name: odbc-config
          configMap:
            name: odbc-config
        {{- end }}
        {{- end }}
        {{- if eq .Values.databases.datawarehouse.provider "snowflake" }}
        {{- if .Values.databases.datawarehouse.enabled }}
        - name: snowflake-creds
          configMap:
            name: {{ .Values.databases.datawarehouse.snowflake.ConfigMapName }}
        {{- end }}
        {{- end }}
        {{- if .Values.storage.persistentVolumeClaims.FileOutputDirectory.enabled }}
        - name: rpifileoutputdir
          persistentVolumeClaim:
            claimName: {{ .Values.storage.persistentVolumeClaims.FileOutputDirectory.claimName }}
        {{- end }}
        {{- if .Values.storage.persistentVolumeClaims.DataManagementUploadDirectory.enabled }}
        - name: rpdmuploaddirectory
          persistentVolumeClaim:
            claimName: {{ .Values.storage.persistentVolumeClaims.DataManagementUploadDirectory.claimName }}
        {{- end }}
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
        {{ .Values.nodeSelector.key }}: {{ .Values.nodeSelector.value }}
      {{- end }}
      {{- if .Values.tolerations.enabled }}
      tolerations:
        - effect: NoSchedule
          key: {{ .Values.nodeSelector.key }}
          operator: Equal
          value: {{ .Values.nodeSelector.value }}
      {{- end }}
{{- end }}
