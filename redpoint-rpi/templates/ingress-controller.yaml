{{- if .Values.ingress.controller.enabled }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.12.1
  name: nginx-{{ .Release.Namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.12.1
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - nginx-{{ .Release.Namespace }}
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - nginx-{{ .Release.Namespace }}
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.12.1
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-{{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.12.1
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-{{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx-config
  namespace: {{ .Release.Namespace }}
data:

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: tcp-services
  namespace: {{ .Release.Namespace }}
data:

---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: {{ .Values.ingress.className }}
spec:
  controller: k8s.io/ingress-nginx

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
    {{- with .Values.ingress.customLabels }}
    {{- toYaml . | nindent 4 }} 
    {{- end }}
  name: ingress-nginx-controller
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/component: controller
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/component: controller
        {{- with .Values.ingress.customLabels }}
        {{- toYaml . | nindent 8 }} 
        {{- end }}
      annotations:
        {{- with .Values.ingress.customAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.global.deployment.images.imagePullSecret.enabled }}
      imagePullSecrets:
      - name: {{ .Values.global.deployment.images.imagePullSecret.name }}
      {{- end }}
      containers:
        - name: controller
          image: {{ .Values.global.deployment.images.ingress_controller }}:{{ .Values.global.deployment.images.tag }}
          imagePullPolicy: {{  .Values.global.deployment.images.imagePullPolicy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service={{ .Release.Namespace }}/nginx-{{ .Release.Namespace }}
            - --election-id=nginx-{{ .Release.Namespace }}
            - --controller-class=k8s.io/ingress-nginx
            - --configmap={{ .Release.Namespace }}/nginx-config
            - --tcp-services-configmap={{ .Release.Namespace }}/tcp-services
            - --default-ssl-certificate={{ .Release.Namespace }}/ingress-tls
            - --ingress-class={{ .Values.ingress.className }}
            - --watch-namespace={{ .Release.Namespace }}
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
      serviceAccountName: nginx-{{ .Release.Namespace }}
      terminationGracePeriodSeconds: 300
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
        {{ .Values.nodeSelector.key }}: {{ .Values.nodeSelector.value }}
      {{- end }}
      {{- if .Values.tolerations.enabled }}
      tolerations:
        - effect: NoSchedule
          key: {{ .Values.nodeSelector.key }}
          operator: Equal
          value: {{ .Values.nodeSelector.value }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    {{- if eq .Values.ingress.mode "private" }}
    {{- if eq .Values.global.deployment.platform "azure" }}
    service.beta.kubernetes.io/azure-load-balancer-internal: {{.Values.ingress.controller.enabled | quote }}
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: {{.Values.ingress.subnetName | quote }}
    {{- end }}
    {{- end }}
    {{- if eq .Values.global.deployment.platform "amazon" }}
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    {{- end }}
    {{- if eq .Values.ingress.mode "public" }}
    {{- if eq .Values.global.deployment.platform "amazon" }}
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    {{- end }}
    {{- end }}
    {{- if eq .Values.global.deployment.platform "amazon" }}
    {{- if eq .Values.ingress.mode "private" }}
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    {{- end }}
    {{- end }}
    {{- if eq .Values.global.deployment.platform "amazon" }}
    {{- if eq .Values.ingress.certificateSource "acm" }}
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: {{ .Values.ingress.certificateArn | quote }}
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    {{- end }}
    {{- end }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ipFamilyPolicy: SingleStack
  ipFamilies:
    - IPv4
  ports:
    - name: http
      port: {{ .Values.ingress.service.port }}
      protocol: TCP
      targetPort: 80
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/component: controller

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 1.12.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
automountServiceAccountToken: true
{{- end }}